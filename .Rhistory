# get the score
score= sum(pos.matches)-sum(neg.matches)
return(score)},words.positive,words.negative,.progress=.progress)
## Return the dataframe with the respective sentence and scores
return(data.frame(text=sentences,score=scores))}
Result<-getsentimentscore(commentdf$comments)
Result<-as.data.frame(Result)
## Categorise the words to very negative to very positive from tweets of Sully
vNeg<-nrow(as.data.frame(Result$text[Result$score==-2]))
Neg<-nrow(as.data.frame(Result$score[Result$score==-1]))
Neutral<-nrow((as.data.frame(Result$score[Result$score==0])))
Pos<-nrow(as.data.frame(Result$score[Result$score==2|Result==1]))
vPos<-nrow(as.data.frame(Result$score[Result$score==3]))
## Build the data frame
Tweets=as.data.frame(c(vNeg,Neg,Neutral,Pos,vPos))
colnames(Tweets)=c("Number of Tweets")
Emotion=as.data.frame(c("vNeg","Neg","Neutral","Pos","vPos"))
colnames(Emotion)=c("Degree of Emotion")
Plot.Result=as.data.frame(cbind(Emotion,Tweets))
## Plot the Emotion
library(ggplot2)
ggplot(data=Plot.Result,aes(x=Plot.Result$`Degree of Emotion`,y=Plot.Result$`Number of Tweets`))+
geom_bar(aes(fill=Plot.Result$`Degree of Emotion`),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+xlab("Degree of Emotion")+
ylab("Number of Tweets")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
yt_master_data<-yt_search("Jack Ma")
yt_master_data<-yt_search("Jack Ma",published_after = "2018-01-01T00:00:00Z")
yt_master_data
elon_comments<-get_all_comments(video_id = yt_master_data$video_id[2])
nrow(elon_comments)
yt_master_data<-yt_search("Sundar Pichai",published_after = "2018-01-01T00:00:00Z")
elon_comments<-get_all_comments(video_id = yt_master_data$video_id[2])
yt_master_data<-yt_search("Sundar Pichai",published_after = "2018-01-01T00:00:00Z")
yt_master_data
yt_master_data<-yt_search("Sundar Pichai",published_after = "2018-01-01T00:00:00Z")
yt_master_data
yt_master_data<-yt_search("Pichai",published_after = "2018-01-01T00:00:00Z")
yt_master_data
elon_comments<-get_all_comments(video_id = yt_master_data$video_id[2])
elon_comments
nrow(elon_comments)
yt_master_data<-yt_search("Sundar Pichai",published_after = "2018-01-01T00:00:00Z")
yt_master_data
?yt_search()
yt_master_data<-yt_search("SundarPichai",published_after = "2018-01-01T00:00:00Z")
yt_master_data
nrow(yt_master_data)
elon_comments<-get_all_comments(video_id = yt_master_data$video_id[2])
nrow(elon_comments)
text<-elon_comments$textDisplay%>%data.frame()
colnames(text)<-c("comments")
#  remove html links, which are not required for sentiment analysis
tweet1=gsub("https://","",text$comments)
tweet2=gsub("#","",tweet1)
tweet3=gsub("@","",tweet2)
tweet4=gsub("RT|via","",tweet3)
tweet5=gsub("[[:digit:]]","",tweet4)
tweet6=gsub("'\'"," ", tweet5)
tweet6<-tweet6%>%data.frame()
colnames(tweet6)<-c("comments")
## Sentiment Analysis
commentdf=tweet6
commentf=commentdf[!is.na(commentdf$comments),]
commentdf<-commentdf%>%data.frame()
colnames(commentdf)<-c("comments")
## Scan the Lexicon words (English) database which is in txt format
opinion.lexicon.pos<-scan('positive-words.txt',what='character',comment.char = ';')
opinion.lexicon.neg<-scan('negative-words.txt', what='character', comment.char=';')
# upgrade the positive and negative word list
pos.words=c(opinion.lexicon.pos)
neg.words=c(opinion.lexicon.neg,'haunt','modi','fcuk','cancel')
## Create the function for the sentiment score
getsentimentscore=function(sentences,words.positive,words.negative,.progress='none'){
require(plyr)
require(stringr)
scores=laply(sentences,function(sentence,words.positive,words.negative,.progress='none'){
# let us split each sentence by space delimiter
words=unlist(str_split(sentence,'\\s+'))
# Let us match with our database
pos.matches=!is.na(match(words,pos.words))
neg.matches=!is.na(match(words,neg.words))
# get the score
score= sum(pos.matches)-sum(neg.matches)
return(score)},words.positive,words.negative,.progress=.progress)
## Return the dataframe with the respective sentence and scores
return(data.frame(text=sentences,score=scores))}
Result<-getsentimentscore(commentdf$comments)
Result<-as.data.frame(Result)
## Categorise the words to very negative to very positive from tweets of Sully
vNeg<-nrow(as.data.frame(Result$text[Result$score==-2]))
Neg<-nrow(as.data.frame(Result$score[Result$score==-1]))
Neutral<-nrow((as.data.frame(Result$score[Result$score==0])))
Pos<-nrow(as.data.frame(Result$score[Result$score==2|Result==1]))
vPos<-nrow(as.data.frame(Result$score[Result$score==3]))
## Build the data frame
Tweets=as.data.frame(c(vNeg,Neg,Neutral,Pos,vPos))
colnames(Tweets)=c("Number of Tweets")
Emotion=as.data.frame(c("vNeg","Neg","Neutral","Pos","vPos"))
colnames(Emotion)=c("Degree of Emotion")
Plot.Result=as.data.frame(cbind(Emotion,Tweets))
## Plot the Emotion
library(ggplot2)
ggplot(data=Plot.Result,aes(x=Plot.Result$`Degree of Emotion`,y=Plot.Result$`Number of Tweets`))+
geom_bar(aes(fill=Plot.Result$`Degree of Emotion`),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+xlab("Degree of Emotion")+
ylab("Number of Tweets")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
Result[1]
class(Result)
Result[1,1]
Result[1,]
elon_comments$textDisplay[1]
elon_comments$textDisplay[2]
Result[2,]
Result[3,]
Result[4,]
Result[5,]
Result[6,]
Result[10,]
install.packages("sentimentr")
library(sentimentr)
sentiment<-sentiment(commentdf$comments)
class(commentdf$comments)
commentdf=tweet6
commentf=commentdf[!is.na(commentdf$comments),]
commentdf<-commentdf%>%data.frame(stringsAsFactors = FALSE)
colnames(commentdf)<-c("comments")
class(commentdf$comments)
commentdf$comments<-as.character(commentdf$comments)
colnames(commentdf)<-c("comments")
class(commentdf$comments)
sentiment<-sentiment(commentdf$comments)
sentiment
names(sentiment)
sentiment$sentence_id
commentdf$comments[1:5]
result[4,]
Result[4,]
Result[5,]
install.packages("tidytext")
library(tidytext)
sentiment<-get_sentiments(commentdf$comments)
text_df2 <- commentdf %>%
unnest_tokens(word,text)
text_df<-data_frame(line = 1, text=commentdf$comments)
text_df
text_df2 <- text_df %>%
unnest_tokens(word,text)
text_df2
get_sentiments(text_df2)
?get_sentiments
text_df2%>%get_sentiments("bing","affin","nrc")
text_df2%>%get_sentiments(lexicon=c("bing","affin","nrc"))
text_df2%>%get_sentiments("bing")
text_df2%>%inner_join(get_sentiments("bing"))
text_df2%>%inner_join(get_sentiments("afinn"))
Result[1:5,]
text_df2%>%inner_join(get_sentiments("nrc"))
text_df2%>%inner_join(get_sentiments("loughran"))
sentiment<-text_df2%>%inner_join(get_sentiments("loughran"))
class(sentiment)
names(sentiment)
sentiment[2,]
sentiment[3,]
sentiment$word
sentiment$sentiment
sentiment$line
nrow(commentdf)
nrow(sentiment)
sentiment<-text_df2%>%inner_join(get_sentiments("afinn"))
?inner_join
sentiment<-text_df2%>%inner_join(get_sentiments("afinn"),by="line")
sentiment<-text_df2%>%inner_join(get_sentiments("afinn"),by="word")
sentiment
sentiment<-text_df2%>%inner_join(get_sentiments("nrc"),by="word")
sentiment
?get_sentiments
sentiment<-text_df2%>%inner_join(get_sentiments("loughran"),by="word")
sentiment<-text_df2%>%inner_join(get_sentiments("loughran"),by="word")
sentiment
sentiment_df<-group_by(sentiment,sentiment$sentiment)
Sentiment<-text_df2%>%inner_join(get_sentiments("loughran"),by="word")
sentiment_df<-group_by(Sentiment,sentiment)
sentiment_df
sentiment_df<-summarise(sentiment_df,count())
sentiment_df<-summarise(sentiment_df,count=n())
sentiment_df
library(ggplot2)
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=factor(sentiment_df$sentiment)),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=factor(sentiment_df$sentiment)),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+xlab("Sentiment")
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=factor(sentiment_df$sentiment)),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=factor(sentiment_df$sentiment)),stat="identity",width=0.4)+
xlab("Sentiment")
factor(sentiment_df$sentiment)
numeric(sentiment_df$sentiment)
as.numeric(sentiment_df$sentiment)
count(sentiment_df$sentiment)
length(sentiment_df$sentiment)
1:length(sentiment_df$sentiment)
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=1:length(sentiment_df$sentiment)),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=sentiment_df$sentiment),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment,aes(x=sentiment_df$sentiment,y=sentiment_df$count))
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=sentiment_df$sentiment),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=1:length(sentiment_df$sentiment)),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
1:length(sentiment_df$sentiment)
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=Plot.Result$`Number of Tweets`),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
class(sentiment_df)
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=1:length(sentiment_df$sentiment)),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=1:length(sentiment_df$sentiment)),stat="identity",width=0.4)+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=sentiment_df$sentiment),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=sentiment_df$sentiment),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
ggplot(data=sentiment_df,aes(x=sentiment_df$sentiment,y=sentiment_df$count))+
geom_bar(aes(fill=sentiment_df$sentiment),stat="identity",width=0.4)+
scale_fill_brewer(palette="Dark2")+
xlab("Sentiment")+
ylab("Number of words")+
geom_text(aes(label=sentiment_df$count),
vjust=-0.5,colour="brown",stat="identity")+theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),legend.position = 'none')
yt_master_data<-yt_search("Naveen Jain",published_after = "2018-01-01T00:00:00Z")
yt_oauth(id,
client_secret,token = "")
yt_master_data<-yt_search("Naveen Jain",published_after = "2018-01-01T00:00:00Z")
yt_master_data<-yt_search("NaveenJain",published_after = "2018-01-01T00:00:00Z")
yt_master_data<-yt_search("Elon Musk",published_after = "2018-01-01T00:00:00Z")
apikey<-"AIzaSyABdBR3iJRgPM5x67CZ3yepIg6EaEdaL9Y"
id<-"1009352872731-k76rb1hpv0cm5pgrt0e5c7llrai278oj.apps.googleusercontent.com"
client_secret<-"c6OsQTzyrTbiw43UUHslRCFp"
yt_oauth(id,
client_secret,token = "")
yt_master_data<-yt_search("Elon Musk",published_after = "2018-01-01T00:00:00Z")
apikey<-"AIzaSyABdBR3iJRgPM5x67CZ3yepIg6EaEdaL9Y"
id<-"1009352872731-k76rb1hpv0cm5pgrt0e5c7llrai278oj.apps.googleusercontent.com"
client_secret<-"c6OsQTzyrTbiw43UUHslRCFp"
yt_oauth(id,
client_secret,token = "")
yt_master_data<-yt_search("Elon Musk",published_after = "2018-01-01T00:00:00Z")
sentiment
apikey<-"AIzaSyABdBR3iJRgPM5x67CZ3yepIg6EaEdaL9Y"
id<-"1009352872731-k76rb1hpv0cm5pgrt0e5c7llrai278oj.apps.googleusercontent.com"
client_secret<-"c6OsQTzyrTbiw43UUHslRCFp"
# = Autentication = #
yt_oauth(id,
client_secret,token = "")
yt_master_data<-yt_search("Elon Musk",published_after = "2018-01-01T00:00:00Z")
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
list(src="JackMa.jpg",height=350))
list(src="JackMa.jpg",height=350)
renderImage(list(src="JackMa.jpg",height=350))
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidytext)
?get_sentiments
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
img(src="www/SundarPichai.jpg",height='350px',width='400px')
runApp()
setwd("C:/Users/Richie/Desktop/NLP")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(fluidPage(theme=shinytheme('cerulean'),
navbarPage(title="Text Mining",id="nav",
tabPanel("Sentiment Analysis of Trending Entrepreneurs 2018",value="TextMining",
fluidRow(style="background-color:white;",column(6,
helpText(h3("Select Trending Entrepreneurs of 2018")),
selectInput(inputId = "Entrepreneurs",label="Select Entrepreneurs",
choices=c("Sundar Pichai","JackMa","Elon Musk",
"Bill Gates","Jeff Bezos","Naveen Jain"),
selected="Sundar Pichai"),
br(),
imageOutput(outputId="image_plot"),
textOutput(outputId ="quote")),
column(6,helpText(h2("Word Cloud")),
wordcloud2Output(outputId = "wordcloud2"))
),
fluidRow(
column(6,
helpText(h3("Different Category of Emotion (3D Pie)")),
radioButtons(inputId = "lexicon",label="choose lexicon dictionary",
choices=c("nrc","bing"),selected="nrc"),
plotOutput(outputId = "pie3d")),
column(6,helpText(h3("Word Count")),
plotOutput(outputId = "word_count"))
),
fluidRow(column(6,
helpText(h3("Polarity Bar Plot")),
plotOutput(outputId = "Bar_Plot")),
column(6,
helpText(h3("Trending Videos with Number of likes and views")),
tableOutput(outputId = "table_views"))
)
),
tabPanel("Data Source and Code",value="Resources",
fluidRow(column(12)))
)
)
)
shinyUI(fluidPage(theme=shinytheme('cerulean'),
navbarPage(title="Text Mining",id="nav",
tabPanel("Sentiment Analysis of Trending Entrepreneurs 2018",value="TextMining",
fluidRow(style="background-color:white;",column(6,
helpText(h3("Select Trending Entrepreneurs of 2018")),
selectInput(inputId = "Entrepreneurs",label="Select Entrepreneurs",
choices=c("Sundar Pichai","JackMa","Elon Musk",
"Bill Gates","Jeff Bezos","Naveen Jain"),
selected="Sundar Pichai"),
br(),
imageOutput(outputId="image_plot"),
textOutput(outputId ="quote")),
column(6,helpText(h2("Word Cloud")),
wordcloud2Output(outputId = "wordcloud2"))
),
fluidRow(
column(6,
helpText(h3("Different Category of Emotion (3D Pie)")),
radioButtons(inputId = "lexicon",label="choose lexicon dictionary",
choices=c("nrc","bing"),selected="nrc"),
plotOutput(outputId = "pie3d")),
column(6,helpText(h3("Word Count")),
plotOutput(outputId = "word_count"))
),
fluidRow(column(6,
helpText(h3("Polarity Bar Plot")),
plotOutput(outputId = "Bar_Plot")),
column(6,
helpText(h3("Trending Videos with Number of likes and views")),
tableOutput(outputId = "table_views"))
)
),
tabPanel("Data Source and Code",value="Resources",
fluidRow(column(12)))
)
)
)
source('C:/Users/Richie/Desktop/NLP/app.R', echo=TRUE)
shiny::runApp()
runApp()
list(src=as.character(paste(input$Entrepreneurs),".jpg",sep=""),height="400")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
text<-"Sundar Pichai"
gsub(" ","",text)
runApp()
runApp()
text
x<-gsub(" ","",text)
x
class(x)
x
x[1]
x[[1]]
runApp()
paste("www/",x,".jpg",sep="")
as.character(paste("www/",x,".jpg",sep=""))
y<-SundarPichai
y<-"SundarPichai"
y
y<-as.character("SundarPichai")
y
y<-paste("SundarPichai")
y
y<-paste0("SundarPichai")
y
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
